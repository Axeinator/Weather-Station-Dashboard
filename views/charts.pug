html 
  head

  title= 'Weather Station'
  link(rel='stylesheet' href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1"
  crossorigin="anonymous")
  link(rel='stylesheet'
  href='https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.3.1/css/ion.rangeSlider.min.css')
  script(src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js')
  script(src='https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.3.1/js/ion.rangeSlider.min.js')
  script(src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.bundle.min.js" integrity="sha512-SuxO9djzjML6b9w9/I07IWnLnQhgyYVSpHZx0JV97kGBfTIsUYlWflyuW4ypnvhBrslz1yJ3R+S14fdCWmSmSA==" crossorigin="anonymous" defer)
  link(rel='stylesheet' href='main.css')
  script(src='graphing.js')

  body(onload='farenOrCels(); humidityGraphSetup(); createLatestTable(); latestReading();')
  h1 Weather Station - Houston, TX
  h2 Current Conditions
  table(id='currentConditions' style="width: 50%")
  div(class='row justify-content-center')
    button(id='refreshCurrent' class='btn btn-primary btn-lg' onclick='updateCurrent()') Refresh Reading
    p(id='refreshPleaseWait' style='display: none') Please wait before refreshing the reading again.

  h2 Temperature
  input(type="text" id="temperatureTimeRange" name="timeRange")
  div(class="form-check form-check-inline")
    input(class="form-check-input" type="radio" name="inlineRadioOptions" id="faren" value="Fahrenheit" onclick="temperatureGraphSetup()")
    label(class="form-check-label" for="faren") Fahrenheit
    br
    input(class="form-check-input" type="radio" name="inlineRadioOptions" id="cels" value="Celsius" onclick="temperatureGraphSetupCelsius()")
    label(class="form-check-label" for="cels") Celsius

canvas(class='graph' id='temperatureChart' width='50%' height='50vh')

  h2 Relative Humidity
  input(type="text" id="humidityTimeRange" name="timeRange")
  canvas(class='graph' id='humidityChart' width='50%' height='50vh')
  iframe(style="background: #FFFFFF;border: none;border-radius: 2px;box-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2);"
    width="100%" height="80%"
    src="https://charts.mongodb.com/charts-weather-station-v1-wwkqe/embed/charts?id=60f9f7ba-8ee0-4da3-8052-08ec503d959d&theme=light")
  iframe(style="background: #FFFFFF;border: none;border-radius: 2px;box-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2);"
    width="100%" height="80%"
    src="https://charts.mongodb.com/charts-weather-station-v1-wwkqe/embed/charts?id=8bd5878e-f884-4095-bab2-86423d80efe5&theme=light")

  h4 Want to learn more about how the station works? #[a(href='/info') Click here]

  script.
    function farenOrCels() {
      console.log("Running on load farencels")
      console.log(`celsius storage onload: ${window.localStorage.getItem('celsius')}`)
      if (window.localStorage.getItem('celsius') === 'true') { // the local storage is a string, not boolean
        console.log("Now inside the if for farenorcels")
        document.getElementById('cels').checked = true
        temperatureGraphSetupCelsius()
      }
      else {
        console.log(`celsius storage in else: ${window.localStorage.getItem('celsius')}`)
        console.log("Now inside the else for farenorcels")
        document.getElementById('faren').checked = true
        temperatureGraphSetup()
      }

    }
    function toCelsius(temp) {
      return (temp - 32) * (5/9)
    }
    function temperatureGraphSetup() {
      window.localStorage.setItem('celsius', false)
      console.log("Running the faren setup function")
      console.log("set to faren")
      console.log(`after setting to faren: ${window.localStorage.getItem('celsius')}`)
      const temps = !{JSON.stringify(temps)}
      let xArray = []
      temps.forEach(obs => xArray.push(new Date(obs.time)))
      let yArray = []
      temps.forEach(obs => yArray.push(obs.temperature))
      tempChart = temperatureGraph(xArray, yArray)
    }
    function temperatureGraphSetupCelsius() {
      window.localStorage.setItem('celsius', true)
      console.log("set to cels")
      console.log(`after setting to cels: ${window.localStorage.getItem('celsius')}`)
      const temps = !{JSON.stringify(temps)}
      let xArray = []
      temps.forEach(obs => xArray.push(new Date(obs.time)))
      let yArray = []
      temps.forEach(obs => yArray.push(toCelsius(obs.temperature)))
      tempChart = temperatureGraph(xArray, yArray)
    }
    function humidityGraphSetup() {
      const humidity = !{JSON.stringify(humidities)}
      let xArray = []
      humidity.forEach(obs => xArray.push(new Date(obs.time)))
      let yArray = []
      humidity.forEach(obs => yArray.push(obs.humidity))
      humChart = humidityGraph(xArray, yArray)
    }
    function createLatestTable() {
      currentStatsTable = document.getElementById('currentConditions')
      currentTime = currentStatsTable.insertRow().insertCell(0)
      currentTemperature = currentStatsTable.insertRow().insertCell(0)
      currentHumidity = currentStatsTable.insertRow().insertCell(0)

    }
    function latestReading(reading = !{JSON.stringify(current)}) {

      currentTime.innerHTML = new Date(reading[0].time).toLocaleTimeString([], {hour: 'numeric', minute: '2-digit'})
      currentTemperature.innerHTML = (reading[0].temperature.toFixed(1).toString() + "Â°F")
      currentHumidity.innerHTML = (reading[0].humidity.toFixed(1).toString() + "%")
    }




script.
    var humiditySlider = document.getElementById('humidityTimeRange')
    $("#humidityTimeRange").ionRangeSlider({
      skin: 'big',
      type: 'double',
      min: 1,
      max: 24,
      from: 1,
      to: 24,
      min_interval: 1,
      onChange: function (data) {
          humChart.options.scales.xAxes[0].ticks.min = Date.now() - ((24 - data.from) * 60 * 60) * 1000
          humChart.options.scales.xAxes[0].ticks.max = Date.now() - ((24 - data.to) * 60 * 60) * 1000
          humChart.update()

      }
    })
    var temperatureSlider = document.getElementById('temperatureTimeRange')
    $("#temperatureTimeRange").ionRangeSlider({
      skin: 'big',
      type: 'double',
      min: 1,
      max: 24,
      from: 1,
      to: 24,
      min_interval: 1,
      onChange: function (data) {
        tempChart.options.scales.xAxes[0].ticks.min = Date.now() - ((24 - data.from) * 60 * 60) * 1000
        tempChart.options.scales.xAxes[0].ticks.max = Date.now() - ((24 - data.to) * 60 * 60) * 1000
        tempChart.update()

      }
    })
script.
  function updateCurrent () {
    let xhr = new XMLHttpRequest()
    xhr.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        latestReading(JSON.parse(this.responseText))
        document.getElementById('refreshCurrent').disabled = true
        document.getElementById('refreshPleaseWait').style.display = 'block'
        setTimeout(() => {
          document.getElementById('refreshCurrent').disabled = false
          document.getElementById('refreshPleaseWait').style.display = 'none'
        }, 30000)
      }
    }
      xhr.open('GET', 'currentConditions')
      xhr.send()
  }

