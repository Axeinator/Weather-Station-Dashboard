html
    head

    title= 'Weather Station'
    link(rel='stylesheet' href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1"
        crossorigin="anonymous")
    link(rel='stylesheet'
        href='https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.3.1/css/ion.rangeSlider.min.css')
    link(rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/intro.js/3.3.1/introjs.min.css' integrity='sha512-631ugrjzlQYCOP9P8BOLEMFspr5ooQwY3rgt8SMUa+QqtVMbY/tniEUOcABHDGjK50VExB4CNc61g5oopGqCEw==' crossorigin='anonymous')
    link(rel='stylesheet' href='main.css')

    script(src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.3.1/js/ion.rangeSlider.min.js')
    script(src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.bundle.min.js" integrity="sha512-SuxO9djzjML6b9w9/I07IWnLnQhgyYVSpHZx0JV97kGBfTIsUYlWflyuW4ypnvhBrslz1yJ3R+S14fdCWmSmSA==" crossorigin="anonymous" defer)
    script(src='https://cdnjs.cloudflare.com/ajax/libs/intro.js/3.3.1/intro.min.js' integrity='sha512-NC1GtvckWJQLUHrSQp5+4ydIv6gW8kfP4Ewrwv8Y1xU1h9GTTaXDTnWl+kjHcZNCaX8ySFNSpPmtt/B4SUaDsQ==' crossorigin='anonymous')
    script(src='scripts/graphSetup.js' defer)
    script(src='scripts/movingAvg.js')

    body
    h1 Weather Station - Houston, TX
    h2 Current Conditions
    table(id='currentConditions' style="width: 50%" data-intro="Take a look at the latest weather conditions.")
    div(class='row justify-content-center')
        button(id='refreshCurrent' class='btn btn-primary btn-lg' onclick='updateCurrent()') Refresh Reading
        p(id='refreshPleaseWait' style='display: none') Please wait before refreshing the reading again.
        button(class="btn btn-secondary btn-lg" onclick="introJs().start()") Confused?

    div(class="form-check form-check-inline" style="margin: 10px 45%" data-intro="Choose whether you would like to view temperature in Celsius or Fahrenheit. Your preference will be saved.")
        input(class="form-check-input" type="radio" name="inlineRadioOptions" id="faren" value="Fahrenheit")
        label(class="form-check-label" for="faren") Fahrenheit
        br
        input(class="form-check-input" type="radio" name="inlineRadioOptions" id="cels" value="Celsius")
        label(class="form-check-label" for="cels") Celsius


    div(data-intro="A smoothed temperature graph. Use this to view temperature trends for the past 24 hours. You can also move the two sides of this slider to zoom in on certain time periods.")
        h2 Temperature (10 Period Moving Average)
        p Note: 10 periods is approximately 20 minutes but may vary because of the sensor receiving invalid readings.
        input(type="text" id="temperatureMATimeRange" name="timeRange")
    canvas(class='graph' id='movingAvgTemperature' width='50%' height='50vh')

    h2(data-intro="A raw temperature graph, recommended to detect sensor issues.") Temperature
    input(type="text" id="temperatureTimeRange" name="timeRange")
    canvas(class='graph' id='temperatureChart' width='50%' height='50vh')

    h2(data-intro="A relative humidity graph, maximum is 100%, typically when it is raining.") Relative Humidity
    input(type="text" id="humidityTimeRange" name="timeRange")
    canvas(class='graph' id='humidityChart' width='50%' height='50vh')

    h2(data-intro="These are hourly temperature averages for the past 24 hours.") Hourly Averages
    iframe(id='hourly' style="background: #FFFFFF;border: none;border-radius: 2px;box-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2);"
        width="100%" height="80%")

    h2(data-intro="These are daily temperature maximum and minimums for the previous 7 days.") Daily Max/Min
    iframe(id='daily' style="background: #FFFFFF;border: none;border-radius: 2px;box-shadow: 0 2px 10px 0 rgba(70, 76, 79, .2);"
        width="100%" height="80%")

    h4(data-intro="Learn more about the station setup here.") Want to learn more about how the station works? #[a(href='/info') Click here]

script.
  const celsHourTempURL = !{JSON.stringify(celsHourTempURL)}
  const celsDayTempURL = !{JSON.stringify(celsDayTempURL)}
  const farHourTempURL = !{JSON.stringify(farHourTempURL)}
  const farDayTempURL = !{JSON.stringify(farDayTempURL)}
  window.onload = () => {
    createLatestTable();
    if (window.localStorage.getItem('celsius') === 'true') {
      document.getElementById('cels').checked = true
      tempChart = temperatureGraphSetup(!{JSON.stringify(tempsC)}, "°C", 'temperatureChart');
      let calcedMovingAvg = maArraySetup(!{JSON.stringify(tempsC)})
      tempMAChart = temperatureGraphSetup(calcedMovingAvg, '°C', 'movingAvgTemperature')
      latestReading(true)
      document.getElementById('hourly').src = celsHourTempURL
      document.getElementById('daily').src = celsDayTempURL
    } else {
      document.getElementById('faren').checked = true
      tempChart = temperatureGraphSetup(!{JSON.stringify(tempsF)}, "°F", "temperatureChart")
      let calcedMovingAvg = maArraySetup(!{JSON.stringify(tempsF)})
      tempMAChart = temperatureGraphSetup(calcedMovingAvg, '°F', 'movingAvgTemperature')
      latestReading(false)
      document.getElementById('hourly').src = farHourTempURL
      document.getElementById('daily').src = farDayTempURL
    }
    humChart = humidityGraphSetup(!{JSON.stringify(humidities)});
  }

  document.getElementById('faren').addEventListener('click', () => {
    try {
      temperatureSlider.reset()
      tempChart.destroy()
      tempMAChart.destroy()
      latestReading(false)
      tempChart = temperatureGraphSetup(!{JSON.stringify(tempsF)}, "°F", "temperatureChart")
      let calcedMovingAvg = maArraySetup(!{JSON.stringify(tempsF)})
      tempMAChart = temperatureGraphSetup(calcedMovingAvg, '°F', 'movingAvgTemperature')
      document.getElementById('hourly').src = farHourTempURL
      document.getElementById('daily').src = farDayTempURL
    } finally {
      window.localStorage.setItem('celsius', 'false')
    }
  })
  document.getElementById('cels').addEventListener('click', () => {
    try {
      temperatureSlider.reset()
      tempChart.destroy()
      tempMAChart.destroy()
      latestReading(true)
      tempChart = temperatureGraphSetup(!{JSON.stringify(tempsC)}, "°C", "temperatureChart")
      let calcedMovingAvg = maArraySetup(!{JSON.stringify(tempsC)})
      tempMAChart = temperatureGraphSetup(calcedMovingAvg, '°C', 'movingAvgTemperature')
      document.getElementById('hourly').src = celsHourTempURL
      document.getElementById('daily').src = celsDayTempURL
    } finally {
      window.localStorage.setItem('celsius', 'true')

    }
  })

  function latestReading(celsius, reading = !{JSON.stringify(current)}) {
    currentTime.innerHTML = new Date(reading[0].time).toLocaleTimeString([], {hour: 'numeric', minute: '2-digit'})
    if (celsius) {
      currentTemperature.innerHTML = (toCelsius(reading[0].temperature).toFixed(1).toString() + "°C")
    } else {
      currentTemperature.innerHTML = (reading[0].temperature.toFixed(1).toString() + "°F")
    }
    currentHumidity.innerHTML = (reading[0].humidity.toFixed(1).toString() + "%")
  }

  var humiditySlider = document.getElementById('humidityTimeRange')
  $("#humidityTimeRange").ionRangeSlider({
    skin: 'big',
    type: 'double',
    min: 1,
    max: 24,
    from: 1,
    to: 24,
    min_interval: 1,
    onChange: function (data) {
      humChart.options.scales.xAxes[0].ticks.min = Date.now() - ((24 - data.from) * 60 * 60) * 1000
      humChart.options.scales.xAxes[0].ticks.max = Date.now() - ((24 - data.to) * 60 * 60) * 1000
      humChart.update()

    }
  })
  $("#temperatureTimeRange").ionRangeSlider({
    skin: 'big',
    type: 'double',
    min: 1,
    max: 24,
    from: 1,
    to: 24,
    min_interval: 1,
    onChange: function (data) {
      tempChart.options.scales.xAxes[0].ticks.min = Date.now() - ((24 - data.from) * 60 * 60) * 1000
      tempChart.options.scales.xAxes[0].ticks.max = Date.now() - ((24 - data.to) * 60 * 60) * 1000
      tempChart.update()
    }
  })
  var temperatureSlider = $("#temperatureTimeRange").data("ionRangeSlider")
  $("#temperatureMATimeRange").ionRangeSlider({
    skin: 'big',
    type: 'double',
    min: 1,
    max: 24,
    from: 1,
    to: 24,
    min_interval: 1,
    onChange: function (data) {
      tempMAChart.options.scales.xAxes[0].ticks.min = Date.now() - ((24 - data.from) * 60 * 60) * 1000
      tempMAChart.options.scales.xAxes[0].ticks.max = Date.now() - ((24 - data.to) * 60 * 60) * 1000
      tempMAChart.update()
    }
  })

script.
  function createLatestTable() {
    currentStatsTable = document.getElementById('currentConditions')
    currentTime = currentStatsTable.insertRow().insertCell(0)
    currentTemperature = currentStatsTable.insertRow().insertCell(0)
    currentHumidity = currentStatsTable.insertRow().insertCell(0)

  }

  function updateCurrent() {
    let xhr = new XMLHttpRequest()
    xhr.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        if (window.localStorage.getItem('celsius') === 'true') {
          latestReading(true, JSON.parse(this.responseText))
        } else {
          latestReading(false, JSON.parse(this.responseText))
        }
        document.getElementById('refreshCurrent').disabled = true
        document.getElementById('refreshPleaseWait').style.display = 'block'
        setTimeout(() => {
          document.getElementById('refreshCurrent').disabled = false
          document.getElementById('refreshPleaseWait').style.display = 'none'
        }, 30000)
      }
    }
    xhr.open('GET', 'currentConditions')
    xhr.send()
  }

